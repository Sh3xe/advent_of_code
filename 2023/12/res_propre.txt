from math import ceil

infos = []
g_nn = []

with open("input", "r") as file:
	lines = file.read().split("\n")
	for line in lines:
		(beg, end) = line.split(" ")
		nums = [int(a) for a in end.split(",")]
		infos.append((beg, nums))

def is_valid(proposal, nums):
	ns = []
	current_count = 0
	for i in range(len(proposal)):
		if proposal[i] == "#":
			current_count += 1
		else:
			if current_count == 0:
				continue
			ns.append(current_count)
			current_count = 0
	if current_count != 0:
		ns.append(current_count)
		current_count = 0
	return ns == nums

def count_possibilities(beg, nums):
	#print(beg, nums)
	return 1

def count_cluster(clusters, nums):
	if len(clusters) == 0:
		return 1 if len(nums) == 0 else 0
	
	if len(nums) == 0:
		return 1 if len(list( filter(lambda x: x == "#", clusters[0])) ) == 0 else 0

	cluster = clusters[0]
	jmax = ceil(len(cluster)/2)

	cc = 0
	for j in range(0, jmax+1):
		if j > len(nums):
			continue

		c = count_possibilities(cluster, nums[0:j])
		if c == 0:
			continue
		cc += c * count_cluster(clusters[1:], nums[j:])
	return cc

def get_count(beg, nums):
	clusters = list(filter(lambda x: x != "", beg.split(".")))
	print("Clusters: ", clusters)
	count = count_cluster(clusters, nums)
	return count

def unfold_beg(beg, nums):
	new_beg = "?".join( [beg] * 5)
	new_nums = nums * 5
	return new_beg, new_nums

total = 0
for (beg, nums) in infos:
	nb, nn = unfold_beg(beg, nums)
	total += get_count(nb, nn)

print("Total: ", total)